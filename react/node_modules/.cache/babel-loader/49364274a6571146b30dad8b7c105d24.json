{"ast":null,"code":"import _slicedToArray from \"I:\\\\projects\\\\reactdjangouserauth\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"I:\\\\projects\\\\reactdjangouserauth\\\\react\\\\src\\\\components\\\\ThemeContext.jsx\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nvar ThemeContext = createContext();\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState('light'),\n    _useState2 = _slicedToArray(_useState, 2),\n    theme = _useState2[0],\n    setTheme = _useState2[1]; // Default theme set to 'light'\n  // Function to toggle between light and dark theme\n  var toggleTheme = function toggleTheme() {\n    var newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n  };\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      toggleTheme: toggleTheme\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport var useTheme = function useTheme() {\n  var context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ThemeContext","ThemeProvider","_ref","children","_useState","_useState2","_slicedToArray","theme","setTheme","toggleTheme","newTheme","createElement","Provider","value","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","useTheme","context","Error"],"sources":["I:/projects/reactdjangouserauth/react/src/components/ThemeContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [theme, setTheme] = useState('light');  // Default theme set to 'light'\r\n\r\n  // Function to toggle between light and dark theme\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE7E,IAAMC,YAAY,GAAGJ,aAAa,CAAC,CAAC;AAEpC,OAAO,IAAMK,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EAAA,IAAAC,SAAA,GACZN,QAAQ,CAAC,OAAO,CAAC;IAAAO,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAApCG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA,KAAwB;EAE9C;EACA,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACxB,IAAMC,QAAQ,GAAGH,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDC,QAAQ,CAACE,QAAQ,CAAC;EACpB,CAAC;EAED,oBACEf,KAAA,CAAAgB,aAAA,CAACX,YAAY,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAEN,KAAK,EAALA,KAAK;MAAEE,WAAW,EAAXA;IAAY,CAAE;IAAAK,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAClDjB,QACoB,CAAC;AAE5B,CAAC;AAED,OAAO,IAAMkB,QAAQ,GAAG,SAAXA,QAAQA,CAAA,EAAS;EAC5B,IAAMC,OAAO,GAAGzB,UAAU,CAACG,YAAY,CAAC;EACxC,IAAI,CAACsB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC"},"metadata":{},"sourceType":"module"}